{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-des-inv-estat"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_DIM_MINISTERIS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "STGPresEstOoaaRe"
						},
						{
							"dataset": {
								"referenceName": "DM_DIM_MINISTERIS",
								"type": "DatasetReference"
							},
							"name": "SourceDimMinisteris"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_DIM_MINISTERIS",
								"type": "DatasetReference"
							},
							"name": "DimMinisteris"
						}
					],
					"transformations": [
						{
							"name": "Distinct"
						},
						{
							"name": "Select"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "FitroRepetidos"
						},
						{
							"name": "DataInici"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_MINISTERI as string,",
						"          DESC_MINISTERI as string,",
						"          COMUNITAT_AUTONOMA as string,",
						"          CODI_CENTRE as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as string,",
						"          DESC_CENTRE as string,",
						"          ID_PROJECTE as string,",
						"          NOM_PROJECTE as string,",
						"          ANY_INICI as string,",
						"          ANY_FI as string,",
						"          PROVINCIA as string,",
						"          TIPUS as string,",
						"          COST_TOTAL as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGPresEstOoaaRe",
						"source(output(",
						"          ID_MINISTERI as string,",
						"          DESC_MINISTERI as string,",
						"          DATA_INICI as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceDimMinisteris",
						"STGPresEstOoaaRe aggregate(groupBy(ID_MINISTERI,",
						"          DESC_MINISTERI),",
						"     Count = count(1)) ~> Distinct",
						"DataInici select(mapColumn(",
						"          ID_MINISTERI = Distinct@ID_MINISTERI,",
						"          DESC_MINISTERI = Distinct@DESC_MINISTERI,",
						"          DATA_INICI",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select",
						"Distinct, SourceDimMinisteris join(Distinct@DESC_MINISTERI == SourceDimMinisteris@DESC_MINISTERI,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin filter(isNull(SourceDimMinisteris@ID_MINISTERI)) ~> FitroRepetidos",
						"FitroRepetidos derive(DATA_INICI = year(currentDate())) ~> DataInici",
						"Select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_MINISTERI as string,",
						"          DESC_MINISTERI as string,",
						"          DATA_INICI as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimMinisteris"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DIM_PROJECTE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "STGPresEstOoaaRe"
						},
						{
							"dataset": {
								"referenceName": "DM_DIM_PROJECTES",
								"type": "DatasetReference"
							},
							"name": "SourceDimProjectes"
						},
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_DET_SEGURETAT_SOCIAL",
								"type": "DatasetReference"
							},
							"name": "STGSeguretatSocial"
						},
						{
							"dataset": {
								"referenceName": "DIM_PROVINCIES",
								"type": "DatasetReference"
							},
							"name": "Provincies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_DIM_PROJECTES",
								"type": "DatasetReference"
							},
							"name": "DimProjecte"
						}
					],
					"transformations": [
						{
							"name": "Distinct"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "FitroRepetidos"
						},
						{
							"name": "DistinctSS"
						},
						{
							"name": "ObtenerIDProjecte"
						},
						{
							"name": "JoinProvincies"
						},
						{
							"name": "SelectSS"
						},
						{
							"name": "Union"
						},
						{
							"name": "select1"
						},
						{
							"name": "FiltroTOTAL"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_MINISTERI as string,",
						"          DESC_MINISTERI as string,",
						"          COMUNITAT_AUTONOMA as string,",
						"          CODI_CENTRE as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as string,",
						"          DESC_CENTRE as string,",
						"          ID_PROJECTE as string,",
						"          NOM_PROJECTE as string,",
						"          ANY_INICI as string,",
						"          ANY_FI as string,",
						"          PROVINCIA as string,",
						"          TIPUS as string,",
						"          COST_TOTAL as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGPresEstOoaaRe",
						"source(output(",
						"          ID_PROJECTE as string,",
						"          NOM_PROJECTE as string,",
						"          DESC_COMENTARI as string,",
						"          ID_MACROPROJECTE as integer,",
						"          CODI_PROJECTE_CLAU as string,",
						"          CODI_SUBPROJECTE as string,",
						"          ID_AMBIT as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceDimProjectes",
						"source(output(",
						"          Organisme as string,",
						"          Programa as string,",
						"          Article as string,",
						"          {Centre Tipus} as string,",
						"          {Número} as string,",
						"          {Denominació} as string,",
						"          Inici as string,",
						"          Final as string,",
						"          {Import Total} as string,",
						"          ANY as string,",
						"          {ANY+1} as string,",
						"          {ANY+2} as string,",
						"          {ANY+3} as string,",
						"          {Província} as string,",
						"          {ID Entitat} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGSeguretatSocial",
						"source(output(",
						"          ID_PROVINCIA as string,",
						"          ID_CCAA as integer,",
						"          NOM_PROVINCIA as string,",
						"          NOM_PROVINCIA_CAT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Provincies",
						"STGPresEstOoaaRe aggregate(groupBy(ID_PROJECTE,",
						"          NOM_PROJECTE),",
						"     count = count(1)) ~> Distinct",
						"Union, SourceDimProjectes join(Union@ID_PROJECTE == SourceDimProjectes@ID_PROJECTE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin filter(isNull(SourceDimProjectes@ID_PROJECTE)) ~> FitroRepetidos",
						"ObtenerIDProjecte aggregate(groupBy({Denominació},",
						"          ID_PROJECTE),",
						"     count = count(1)) ~> DistinctSS",
						"JoinProvincies derive(ID_PROJECTE = iif({Denominació} == 'VARIOS',concat(ID_PROVINCIA,' ',Organisme, ' ', Programa, ' ', Article,' ' ,{Centre Tipus}, ' ', {Número},'V'),concat(ID_PROVINCIA,' ',Organisme, ' ', Programa, ' ', Article,' ' ,{Centre Tipus}, ' ', {Número}))) ~> ObtenerIDProjecte",
						"FiltroTOTAL, Provincies join(lower({Província}) == lower(NOM_PROVINCIA),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProvincies",
						"DistinctSS select(mapColumn(",
						"          NOM_PROJECTE = {Denominació},",
						"          ID_PROJECTE,",
						"          count",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSS",
						"Distinct, SelectSS union(byName: true)~> Union",
						"FitroRepetidos select(mapColumn(",
						"          ID_PROJECTE = Union@ID_PROJECTE,",
						"          NOM_PROJECTE = Union@NOM_PROJECTE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"STGSeguretatSocial filter(substring({Denominació}, 2,5) != 'TOTAL') ~> FiltroTOTAL",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PROJECTE as string,",
						"          NOM_PROJECTE as string,",
						"          DESC_COMENTARI as string,",
						"          ID_MACROPROJECTE as integer,",
						"          CODI_PROJECTE_CLAU as string,",
						"          CODI_SUBPROJECTE as string,",
						"          ID_AMBIT as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimProjecte"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_EXEC_FACT_AGR_CCAA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_EXEC_FACT_AGR_CCAA",
								"type": "DatasetReference"
							},
							"name": "ODSFactAGRCCAA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_EXEC_FACT_AGR_CCAA",
								"type": "DatasetReference"
							},
							"name": "DMFactAGRCCAA"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CCAA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY as integer,",
						"          QTY_CREDIT_INICIAL as decimal(15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES as decimal(15,2),",
						"          QTY_PERCENTATGE as decimal(15,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactAGRCCAA",
						"ODSFactAGRCCAA alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CCAA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY as integer,",
						"          QTY_CREDIT_INICIAL as decimal(15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES as decimal(15,2),",
						"          QTY_PERCENTATGE as decimal(15,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CCAA','DATA_ANY','DESC_TIPUS_ORGANISME'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactAGRCCAA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_EXEC_FACT_DET_SECCIO_ENTITAT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_EXEC_FACT_DET_SECCIO_ENTITAT",
								"type": "DatasetReference"
							},
							"name": "ODSFactDETSeccioEntitat"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_EXEC_FACT_DET_SECCIO_ENTITAT",
								"type": "DatasetReference"
							},
							"name": "DMFactDETSeccioEntitat"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CODI_SECCIO as string,",
						"          DESC_ENTITAT as string,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY as integer,",
						"          QTY_CREDIT_INICIAL as decimal(15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES as decimal(15,2),",
						"          QTY_PERCENTATGE as decimal(15,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactDETSeccioEntitat",
						"ODSFactDETSeccioEntitat alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CODI_SECCIO as string,",
						"          DESC_ENTITAT as string,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY as integer,",
						"          QTY_CREDIT_INICIAL as decimal(15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES as decimal(15,2),",
						"          QTY_PERCENTATGE as decimal(15,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_SECCIO','DATA_ANY','DESC_TIPUS_ORGANISME'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactDETSeccioEntitat"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_LIA_FACT_ADJUDICACIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_LIA_FACT_ADJUDICACIONS",
								"type": "DatasetReference"
							},
							"name": "ODSAdjudicacions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_LIA_FACT_ADJUDICACIONS",
								"type": "DatasetReference"
							},
							"name": "DMAdjudicacions"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ID_LICITACIO as integer,",
						"          QTY_IMPORT_ADJUDICACIO as decimal(15,2),",
						"          DATA_ACORD_LICITACIO as date,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSAdjudicacions",
						"ODSAdjudicacions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_LICITACIO as integer,",
						"          QTY_IMPORT_ADJUDICACIO as decimal(15,2),",
						"          DATA_ACORD_LICITACIO as date,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMAdjudicacions"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_LIA_FACT_LICITACIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_LIA_FACT_LICITACIONS",
								"type": "DatasetReference"
							},
							"name": "ODSLicitacions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_LIA_FACT_LICITACIONS",
								"type": "DatasetReference"
							},
							"name": "DMLicitacions"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_LICITACIO as integer,",
						"          CODI_PROJECTE_CLAU as string,",
						"          DESC_OBJ_CONTRACTE as string,",
						"          DESC_ESTAT as string,",
						"          QTY_PRESSUPOST as decimal(15,2),",
						"          DATA_PRIMERA_PUBLICACIO as date,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSLicitacions",
						"ODSLicitacions alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_LICITACIO as integer,",
						"          CODI_PROJECTE_CLAU as string,",
						"          DESC_OBJ_CONTRACTE as string,",
						"          DESC_ESTAT as string,",
						"          QTY_PRESSUPOST as decimal(15,2),",
						"          DATA_PRIMERA_PUBLICACIO as date,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_LICITACIO'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LICITACIO,",
						"          DESC_OBJ_CONTRACTE,",
						"          DESC_ESTAT,",
						"          QTY_PRESSUPOST,",
						"          DATA_PRIMERA_PUBLICACIO,",
						"          DATA_CARREGA",
						"     )) ~> DMLicitacions"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_AGR_CCAA_MIN_EST_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_AGR_CCAA_MIN_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "ODSFactAGRCCAA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_AGR_CCAA_MIN_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "DMFactAGRCCAA"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CCAA as integer,",
						"          ID_MINISTERI as string,",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactAGRCCAA",
						"ODSFactAGRCCAA alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CCAA as integer,",
						"          ID_MINISTERI as string,",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CCAA','ID_MINISTERI','DATA_ANY_EXC_PRESSUPOSTARI'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactAGRCCAA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_AGR_CCAA_SP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_AGR_CCAA_SP",
								"type": "DatasetReference"
							},
							"name": "ODSFactAGRCCAA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_AGR_CCAA_SP",
								"type": "DatasetReference"
							},
							"name": "DMFactAGRCCAA"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CCAA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactAGRCCAA",
						"ODSFactAGRCCAA alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CCAA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CCAA','DESC_TIPUS_ORGANISME','DATA_ANY_EXC_PRESSUPOSTARI'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactAGRCCAA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_AGR_RESUMEN_INVERSIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_AGR_RESUMEN_INVERSIONS",
								"type": "DatasetReference"
							},
							"name": "ODSFactAGRResumInvers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_AGR_RESUMEN_INVERSIONS",
								"type": "DatasetReference"
							},
							"name": "DMFactAGRResumInvers"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CCAA as integer,",
						"          DESC_INVERSIO as string,",
						"          DATA_ANY_EXC_PRESUPOSTARI as integer,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactAGRResumInvers",
						"ODSFactAGRResumInvers alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CCAA as integer,",
						"          DESC_INVERSIO as string,",
						"          DATA_ANY_EXC_PRESUPOSTARI as integer,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CCAA','DATA_ANY_EXC_PRESUPOSTARI','DESC_INVERSIO'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactAGRResumInvers"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_DET_EST_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "ODSFactDETEstOOAARE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "DMFactDETEstOOAARE"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PROVINCIA as string,",
						"          ID_MINISTERI as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as integer,",
						"          ID_PROJECTE as string,",
						"          ID_ENTITAT as string,",
						"          DESC_PROJECTE as string,",
						"          CODI_CENTRE as string,",
						"          DESC_CENTRE as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS_PROJECTE as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          FLAG_SEGURETAT_SOCIAL as integer,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactDETEstOOAARE",
						"ODSFactDETEstOOAARE alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PROVINCIA as string,",
						"          ID_MINISTERI as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as integer,",
						"          ID_PROJECTE as string,",
						"          ID_ENTITAT as string,",
						"          DESC_PROJECTE as string,",
						"          CODI_CENTRE as string,",
						"          DESC_CENTRE as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS_PROJECTE as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          FLAG_SEGURETAT_SOCIAL as integer,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_PROVINCIA','ID_PROJECTE','DATA_ANY_EXC_PRESSUPOSTARI'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactDETEstOOAARE"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_DET_SP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_DET_SP",
								"type": "DatasetReference"
							},
							"name": "ODSFactDETSP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_DET_SP",
								"type": "DatasetReference"
							},
							"name": "DMFactDETSP"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PROVINCIA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DESC_ENTITAT as string,",
						"          COD_PROJECTE as string,",
						"          DESC_DENOMINACIO as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactDETSP",
						"ODSFactDETSP alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PROVINCIA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DESC_ENTITAT as string,",
						"          COD_PROJECTE as string,",
						"          DESC_DENOMINACIO as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_PROVINCIA','DATA_ANY_EXC_PRESSUPOSTARI','COD_PROJECTE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactDETSP"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_EXEC_FACT_DET_SECCIO_ENTITAT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "STGSPAdmin"
						},
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "STGSPEmpr"
						},
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_AGE",
								"type": "DatasetReference"
							},
							"name": "STGAge"
						},
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "STGOoaaRe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS_EXEC_FACT_DET_SECCIO_ENTITAT",
								"type": "DatasetReference"
							},
							"name": "ODSDetSeccEntitat"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "TipusAdmin"
						},
						{
							"name": "TipusEmpres"
						},
						{
							"name": "Union"
						},
						{
							"name": "CambiaTipos"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "TipusAge"
						},
						{
							"name": "TipusRestaEntitats"
						},
						{
							"name": "OrdenaCampos"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string ('2021')",
						"}",
						"source(output(",
						"          Entitat as string,",
						"          {Inversio Inicial} as string,",
						"          {Inversio Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGSPAdmin",
						"source(output(",
						"          Entitat as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGSPEmpr",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Denominació} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGAge",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Denominació} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGOoaaRe",
						"filter1 select(mapColumn(",
						"          DESC_ENTITAT = Entitat,",
						"          QTY_CREDIT_INICIAL = {Inversio Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Inversio Real},",
						"          QTY_PERCENTATGE = {%}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter2 select(mapColumn(",
						"          DESC_ENTITAT = Entitat,",
						"          QTY_CREDIT_INICIAL = {Inversió Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Inversió Real},",
						"          QTY_PERCENTATGE = {%}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 derive(DESC_TIPUS_ORGANISME = 'SP Administratiu',",
						"          CODI_SECCIO = replace(DESC_ENTITAT, ' ', '')) ~> TipusAdmin",
						"select2 derive(DESC_TIPUS_ORGANISME = 'SP Empresarial',",
						"          CODI_SECCIO = replace(DESC_ENTITAT, ' ', '')) ~> TipusEmpres",
						"TipusAdmin, TipusEmpres, TipusAge, TipusRestaEntitats union(byName: true)~> Union",
						"Union derive(DATA_ANY = toInteger($Any),",
						"          QTY_CREDIT_INICIAL = toDecimal(QTY_CREDIT_INICIAL,15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES = toDecimal(QTY_OBLIGACIONS_RECONEGUDES,15,2),",
						"          QTY_PERCENTATGE = toDecimal(QTY_PERCENTATGE,15,2)) ~> CambiaTipos",
						"filter3 select(mapColumn(",
						"          CODI_SECCIO = {Codi Secció},",
						"          QTY_CREDIT_INICIAL = {Crèdit Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Obligacions Reconegudes},",
						"          QTY_PERCENTATGE = {%},",
						"          DESC_ENTITAT = {Denominació}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filter4 select(mapColumn(",
						"          CODI_SECCIO = {Codi Secció},",
						"          QTY_CREDIT_INICIAL = {Crèdit Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Obligacions Reconegudes},",
						"          QTY_PERCENTATGE = {%},",
						"          DESC_ENTITAT = {Denominació}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select4 derive(DESC_TIPUS_ORGANISME = 'AGE',",
						"          CODI_SECCIO = substring(CODI_SECCIO,1,2)) ~> TipusAge",
						"select5 derive(DESC_TIPUS_ORGANISME = 'OOAA i resta',",
						"          CODI_SECCIO = toString(toInteger(CODI_SECCIO))) ~> TipusRestaEntitats",
						"CambiaTipos select(mapColumn(",
						"          CODI_SECCIO,",
						"          DESC_ENTITAT,",
						"          DESC_TIPUS_ORGANISME,",
						"          DATA_ANY,",
						"          QTY_CREDIT_INICIAL,",
						"          QTY_OBLIGACIONS_RECONEGUDES,",
						"          QTY_PERCENTATGE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OrdenaCampos",
						"STGSPAdmin filter(Entitat != 'nan') ~> filter1",
						"STGSPEmpr filter(Entitat != 'nan') ~> filter2",
						"STGAge filter(or({Codi Secció} != 'nan' , {Denominació} != 'nan')) ~> filter3",
						"STGOoaaRe filter(or({Codi Secció} != 'nan' , {Denominació} != 'nan')) ~> filter4",
						"OrdenaCampos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CODI_SECCIO as string,",
						"          DESC_ENTITAT as string,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY as integer,",
						"          QTY_CREDIT_INICIAL as decimal(15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES as decimal(15,2),",
						"          QTY_PERCENTATGE as decimal(15,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ODSDetSeccEntitat"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_AGE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_AGE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_AGE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_SP_ADMIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_SP_EMPR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_AGE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_AGE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_AGE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Denominació} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Codi Secció} as string,",
						"          {Denominació} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Denominació} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Codi Secció} as string,",
						"          {Denominació} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_SP_ADMIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          Entitat as string,",
						"          {Inversio Inicial} as string,",
						"          {Inversio Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Entitat as string,",
						"          {Inversio Inicial} as string,",
						"          {Inversio Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_SP_EMPR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          Entitat as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Entitat as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}