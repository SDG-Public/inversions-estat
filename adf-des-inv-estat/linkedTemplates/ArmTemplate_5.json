{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-des-inv-estat"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_AGR_CCAA_SP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_AGR_CCAA_SP",
								"type": "DatasetReference"
							},
							"name": "ODSFactAGRCCAA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_AGR_CCAA_SP",
								"type": "DatasetReference"
							},
							"name": "DMFactAGRCCAA"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CCAA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactAGRCCAA",
						"ODSFactAGRCCAA alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CCAA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CCAA','DESC_TIPUS_ORGANISME','DATA_ANY_EXC_PRESSUPOSTARI'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactAGRCCAA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_AGR_RESUMEN_INVERSIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_AGR_RESUMEN_INVERSIONS",
								"type": "DatasetReference"
							},
							"name": "ODSFactAGRResumInvers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_AGR_RESUMEN_INVERSIONS",
								"type": "DatasetReference"
							},
							"name": "DMFactAGRResumInvers"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_CCAA as integer,",
						"          DESC_INVERSIO as string,",
						"          DATA_ANY_EXC_PRESUPOSTARI as integer,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactAGRResumInvers",
						"ODSFactAGRResumInvers alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CCAA as integer,",
						"          DESC_INVERSIO as string,",
						"          DATA_ANY_EXC_PRESUPOSTARI as integer,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_CCAA','DATA_ANY_EXC_PRESUPOSTARI','DESC_INVERSIO'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactAGRResumInvers"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_DET_EST_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "ODSFactDETEstOOAARE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "DMFactDETEstOOAARE"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PROVINCIA as string,",
						"          ID_MINISTERI as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as integer,",
						"          ID_PROJECTE as string,",
						"          ID_ENTITAT as string,",
						"          DESC_PROJECTE as string,",
						"          CODI_CENTRE as string,",
						"          DESC_CENTRE as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS_PROJECTE as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          FLAG_SEGURETAT_SOCIAL as integer,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactDETEstOOAARE",
						"ODSFactDETEstOOAARE alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PROVINCIA as string,",
						"          ID_MINISTERI as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as integer,",
						"          ID_PROJECTE as string,",
						"          ID_ENTITAT as string,",
						"          DESC_PROJECTE as string,",
						"          CODI_CENTRE as string,",
						"          DESC_CENTRE as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS_PROJECTE as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          FLAG_SEGURETAT_SOCIAL as integer,",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_PROVINCIA','ID_PROJECTE','DATA_ANY_EXC_PRESSUPOSTARI'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactDETEstOOAARE"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_PRES_FACT_DET_SP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_PRES_FACT_DET_SP",
								"type": "DatasetReference"
							},
							"name": "ODSFactDETSP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_PRES_FACT_DET_SP",
								"type": "DatasetReference"
							},
							"name": "DMFactDETSP"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_PROVINCIA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DESC_ENTITAT as string,",
						"          COD_PROJECTE as string,",
						"          DESC_DENOMINACIO as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactDETSP",
						"ODSFactDETSP alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_PROVINCIA as integer,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DESC_ENTITAT as string,",
						"          COD_PROJECTE as string,",
						"          DESC_DENOMINACIO as string,",
						"          ANY_INICI as integer,",
						"          ANY_FI as integer,",
						"          COD_TIPUS as string,",
						"          QTY_COST_TOTAL as decimal(10,2),",
						"          DATA_ANY_ANT as integer,",
						"          QTY_ANY_ANT as decimal(10,2),",
						"          DATA_ANY_EXC_PRESSUPOSTARI as integer,",
						"          QTY_ANY_EXC_PRESSUPOSTARI as decimal(10,2),",
						"          DATA_ANY_1 as integer,",
						"          QTY_ANY_1 as decimal(10,2),",
						"          DATA_ANY_2 as integer,",
						"          QTY_ANY_2 as decimal(10,2),",
						"          DATA_ANY_3 as integer,",
						"          QTY_ANY_3 as decimal(10,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID_PROVINCIA','DATA_ANY_EXC_PRESSUPOSTARI','COD_PROJECTE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactDETSP"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_EXEC_FACT_DET_SECCIO_ENTITAT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "STGSPAdmin"
						},
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "STGSPEmpr"
						},
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_AGE",
								"type": "DatasetReference"
							},
							"name": "STGAge"
						},
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "STGOoaaRe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS_EXEC_FACT_DET_SECCIO_ENTITAT",
								"type": "DatasetReference"
							},
							"name": "ODSDetSeccEntitat"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "TipusAdmin"
						},
						{
							"name": "TipusEmpres"
						},
						{
							"name": "Union"
						},
						{
							"name": "CambiaTipos"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "TipusAge"
						},
						{
							"name": "TipusRestaEntitats"
						},
						{
							"name": "OrdenaCampos"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string ('2021')",
						"}",
						"source(output(",
						"          Entitat as string,",
						"          {Inversio Inicial} as string,",
						"          {Inversio Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGSPAdmin",
						"source(output(",
						"          Entitat as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGSPEmpr",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGAge",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGOoaaRe",
						"STGSPAdmin select(mapColumn(",
						"          DESC_ENTITAT = Entitat,",
						"          QTY_CREDIT_INICIAL = {Inversio Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Inversio Real},",
						"          QTY_PERCENTATGE = {%}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"STGSPEmpr select(mapColumn(",
						"          DESC_ENTITAT = Entitat,",
						"          QTY_CREDIT_INICIAL = {Inversió Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Inversió Real},",
						"          QTY_PERCENTATGE = {%}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 derive(DESC_TIPUS_ORGANISME = 'Admin',",
						"          CODI_SECCIO = DESC_ENTITAT) ~> TipusAdmin",
						"select2 derive(DESC_TIPUS_ORGANISME = 'Empresa',",
						"          CODI_SECCIO = DESC_ENTITAT) ~> TipusEmpres",
						"TipusAdmin, TipusEmpres, TipusAge, TipusRestaEntitats union(byName: true)~> Union",
						"Union derive(DATA_ANY = toInteger($Any),",
						"          QTY_CREDIT_INICIAL = toDecimal(QTY_CREDIT_INICIAL,15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES = toDecimal(QTY_OBLIGACIONS_RECONEGUDES,15,2),",
						"          QTY_PERCENTATGE = toDecimal(QTY_PERCENTATGE,15,2)) ~> CambiaTipos",
						"STGAge select(mapColumn(",
						"          CODI_SECCIO = {Codi Secció},",
						"          QTY_CREDIT_INICIAL = {Crèdit Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Obligacions Reconegudes},",
						"          QTY_PERCENTATGE = {%}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"STGOoaaRe select(mapColumn(",
						"          CODI_SECCIO = {Codi Secció},",
						"          QTY_CREDIT_INICIAL = {Crèdit Inicial},",
						"          QTY_OBLIGACIONS_RECONEGUDES = {Obligacions Reconegudes},",
						"          QTY_PERCENTATGE = {%}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select4 derive(DESC_TIPUS_ORGANISME = 'AGE') ~> TipusAge",
						"select5 derive(DESC_TIPUS_ORGANISME = 'Resta entitats',",
						"          CODI_SECCIO = toString(toInteger(CODI_SECCIO))) ~> TipusRestaEntitats",
						"CambiaTipos select(mapColumn(",
						"          CODI_SECCIO,",
						"          DESC_ENTITAT,",
						"          DESC_TIPUS_ORGANISME,",
						"          DATA_ANY,",
						"          QTY_CREDIT_INICIAL,",
						"          QTY_OBLIGACIONS_RECONEGUDES,",
						"          QTY_PERCENTATGE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OrdenaCampos",
						"OrdenaCampos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CODI_SECCIO as string,",
						"          DESC_ENTITAT as string,",
						"          DESC_TIPUS_ORGANISME as string,",
						"          DATA_ANY as integer,",
						"          QTY_CREDIT_INICIAL as decimal(15,2),",
						"          QTY_OBLIGACIONS_RECONEGUDES as decimal(15,2),",
						"          QTY_PERCENTATGE as decimal(15,2),",
						"          DATA_CARREGA as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ODSDetSeccEntitat"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_AGE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_AGE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_AGE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_SP_ADMIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_AGR_CCAA_SP_EMPR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_AGR_CCAA_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_AGR_CCAA_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          IDCCAA as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_AGE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_AGE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_AGE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Codi Secció} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          {Codi Secció} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Codi Secció} as string,",
						"          {Crèdit Inicial} as string,",
						"          {Obligacions Reconegudes} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_SP_ADMIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          Entitat as string,",
						"          {Inversio Inicial} as string,",
						"          {Inversio Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Entitat as string,",
						"          {Inversio Inicial} as string,",
						"          {Inversio Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_EXEC_FACT_DET_SP_EMPR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_EXEC_FACT_DET_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_EXEC_FACT_DET_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          Entitat as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Entitat as string,",
						"          {Inversió Inicial} as string,",
						"          {Inversió Real} as string,",
						"          {%} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_LIA_FACT_ADJUDICACIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_LIA_FACT_ADJUDICACIONS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_LIA_FACT_ADJUDICACIONS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string ('2021'),",
						"     Mes as string ('01')",
						"}",
						"source(output(",
						"          Identificador as string,",
						"          {Link licitación} as string,",
						"          {Fecha actualización} as string,",
						"          {Número de expediente} as string,",
						"          Lote as string,",
						"          {Objeto licitación/lote} as string,",
						"          {Presupuesto base con impuestos licitación/lote} as string,",
						"          {Presupuesto base sin impuestos licitación/lote} as string,",
						"          {CPV licitación/lote} as string,",
						"          {Lugar ejecución licitación/lote} as string,",
						"          {Resultado licitación/lote} as string,",
						"          {Fecha del acuerdo licitación/lote} as string,",
						"          {Número de ofertas recibidas por licitación/lote} as string,",
						"          {Precio de la oferta más baja por licitación/lote} as string,",
						"          {Precio de la oferta más alta por licitación/lote} as string,",
						"          {Se han excluído ofertas por ser anormalmente bajas por licitación/lote} as string,",
						"          {Número del contrato licitación/lote} as string,",
						"          {Fecha formalización del contrato licitación/lote} as string,",
						"          {Fecha entrada en vigor del contrato de licitación/lote} as string,",
						"          {Adjudicatario licitación/lote} as string,",
						"          {Tipo de identificador de adjudicatario por licitación/lote} as string,",
						"          {Identificador Adjudicatario de la licitación/lote} as string,",
						"          {El adjudicatario es o no PYME de la licitación/lote} as string,",
						"          {Importe adjudicación sin impuestos licitación/lote} as string,",
						"          {Importe adjudicación con impuestos licitación/lote} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_MES_FITXER = concat($Any,$Mes)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Identificador as string,",
						"          {Link licitación} as string,",
						"          {Fecha actualización} as string,",
						"          {Número de expediente} as string,",
						"          Lote as string,",
						"          {Objeto licitación/lote} as string,",
						"          {Presupuesto base con impuestos licitación/lote} as string,",
						"          {Presupuesto base sin impuestos licitación/lote} as string,",
						"          {CPV licitación/lote} as string,",
						"          {Lugar ejecución licitación/lote} as string,",
						"          {Resultado licitación/lote} as string,",
						"          {Fecha del acuerdo licitación/lote} as string,",
						"          {Número de ofertas recibidas por licitación/lote} as string,",
						"          {Precio de la oferta más baja por licitación/lote} as string,",
						"          {Precio de la oferta más alta por licitación/lote} as string,",
						"          {Se han excluído ofertas por ser anormalmente bajas por licitación/lote} as string,",
						"          {Número del contrato licitación/lote} as string,",
						"          {Fecha formalización del contrato licitación/lote} as string,",
						"          {Fecha entrada en vigor del contrato de licitación/lote} as string,",
						"          {Adjudicatario licitación/lote} as string,",
						"          {Tipo de identificador de adjudicatario por licitación/lote} as string,",
						"          {Identificador Adjudicatario de la licitación/lote} as string,",
						"          {El adjudicatario es o no PYME de la licitación/lote} as string,",
						"          {Importe adjudicación sin impuestos licitación/lote} as string,",
						"          {Importe adjudicación con impuestos licitación/lote} as string,",
						"          DATA_ANY_MES_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Identificador,",
						"          {Link licitación},",
						"          {Fecha actualización},",
						"          {Número de expediente},",
						"          Lote,",
						"          {Objeto licitación/lote},",
						"          {Presupuesto base con impuestos licitación/lote},",
						"          {Presupuesto base sin impuestos licitación/lote},",
						"          {CPV licitación/lote},",
						"          {Lugar ejecución licitación/lote},",
						"          {Resultado licitación/lote},",
						"          {Fecha del acuerdo licitación/lote},",
						"          {Número de ofertas recibidas por licitación/lote},",
						"          {Precio de la oferta más baja por licitación/lote},",
						"          {Precio de la oferta más alta por licitación/lote},",
						"          {Se han excluído ofertas por ser anormalmente bajas por licitación/lote},",
						"          {Número del contrato licitación/lote},",
						"          {Fecha formalización del contrato licitación/lote},",
						"          {Fecha entrada en vigor del contrato de licitación/lote},",
						"          {Adjudicatario licitación/lote},",
						"          {Tipo de identificador de adjudicatario por licitación/lote},",
						"          {Identificador Adjudicatario de la licitación/lote},",
						"          {El adjudicatario es o no PYME de la licitación/lote},",
						"          {Importe adjudicación sin impuestos licitación/lote},",
						"          {Importe adjudicación con impuestos licitación/lote},",
						"          DATA_ANY_MES_FITXER,",
						"          DATA_CARREGA",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_LIA_FACT_LICITACIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_LIA_FACT_LICITACIONS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_LIA_FACT_LICITACIONS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string ('2021'),",
						"     Mes as string ('01')",
						"}",
						"source(output(",
						"          Identificador as string,",
						"          {Link licitación} as string,",
						"          {Fecha actualización} as string,",
						"          {Vigente/Anulada/Archivada} as string,",
						"          {Primera publicación} as string,",
						"          Estado as string,",
						"          {Número de expediente} as string,",
						"          {Objeto del Contrato} as string,",
						"          {Valor estimado del contrato} as string,",
						"          {Presupuesto base sin impuestos} as string,",
						"          {Presupuesto base con impuestos} as string,",
						"          CPV as string,",
						"          {Tipo de contrato} as string,",
						"          {Lugar de ejecución} as string,",
						"          {Órgano de Contratación} as string,",
						"          {ID OC en PLACSP} as string,",
						"          {NIF OC} as string,",
						"          DIR3 as string,",
						"          {Enlace al Perfil de Contratante del OC} as string,",
						"          {Tipo de Administración} as string,",
						"          {Código Postal} as string,",
						"          {Tipo de procedimiento} as string,",
						"          {Sistema de contratación} as string,",
						"          {Tramitación} as string,",
						"          {Forma de presentación de la oferta} as string,",
						"          {Fecha de presentación de ofertas} as string,",
						"          {Fecha de presentación de solicitudes de participacion} as string,",
						"          {Directiva de aplicación} as string,",
						"          {Financiación Europea y fuente} as string,",
						"          {Descripción de la financiación europea} as string,",
						"          {Subcontratación permitida} as string,",
						"          {Subcontratación permitida porcentaje} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_MES_FITXER = concat($Any,$Mes)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Identificador as string,",
						"          {Link licitación} as string,",
						"          {Fecha actualización} as string,",
						"          {Vigente/Anulada/Archivada} as string,",
						"          {Primera publicación} as string,",
						"          Estado as string,",
						"          {Número de expediente} as string,",
						"          {Objeto del Contrato} as string,",
						"          {Valor estimado del contrato} as string,",
						"          {Presupuesto base sin impuestos} as string,",
						"          {Presupuesto base con impuestos} as string,",
						"          CPV as string,",
						"          {Tipo de contrato} as string,",
						"          {Lugar de ejecución} as string,",
						"          {Órgano de Contratación} as string,",
						"          {ID OC en PLACSP} as string,",
						"          {NIF OC} as string,",
						"          DIR3 as string,",
						"          {Enlace al Perfil de Contratante del OC} as string,",
						"          {Tipo de Administración} as string,",
						"          {Código Postal} as string,",
						"          {Tipo de procedimiento} as string,",
						"          {Sistema de contratación} as string,",
						"          {Tramitación} as string,",
						"          {Forma de presentación de la oferta} as string,",
						"          {Fecha de presentación de ofertas} as string,",
						"          {Fecha de presentación de solicitudes de participacion} as string,",
						"          {Directiva de aplicación} as string,",
						"          {Financiación Europea y fuente} as string,",
						"          {Descripción de la financiación europea} as string,",
						"          {Subcontratación permitida} as string,",
						"          {Subcontratación permitida porcentaje} as string,",
						"          DATA_ANY_MES_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Identificador,",
						"          {Link licitación},",
						"          {Fecha actualización},",
						"          {Vigente/Anulada/Archivada},",
						"          {Primera publicación},",
						"          Estado,",
						"          {Número de expediente},",
						"          {Objeto del Contrato},",
						"          {Valor estimado del contrato},",
						"          {Presupuesto base sin impuestos},",
						"          {Presupuesto base con impuestos},",
						"          CPV,",
						"          {Tipo de contrato},",
						"          {Lugar de ejecución},",
						"          {Órgano de Contratación},",
						"          {ID OC en PLACSP},",
						"          {NIF OC},",
						"          DIR3,",
						"          {Enlace al Perfil de Contratante del OC},",
						"          {Tipo de Administración},",
						"          {Código Postal},",
						"          {Tipo de procedimiento},",
						"          {Sistema de contratación},",
						"          {Tramitación},",
						"          {Forma de presentación de la oferta},",
						"          {Fecha de presentación de ofertas},",
						"          {Fecha de presentación de solicitudes de participacion},",
						"          {Directiva de aplicación},",
						"          {Financiación Europea y fuente},",
						"          {Descripción de la financiación europea},",
						"          {Subcontratación permitida},",
						"          {Subcontratación permitida porcentaje},",
						"          DATA_ANY_MES_FITXER,",
						"          DATA_CARREGA",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_PRES_FACT_AGR_CCAA_MIN_EST_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_AGR_CCAA_MIN_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_PRES_FACT_AGR_CCAA_MIN_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          MINISTERI as string,",
						"          {COMUNIDAD AUTONOMA} as string,",
						"          {COST TOTAL} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MINISTERI as string,",
						"          {COMUNIDAD AUTONOMA} as string,",
						"          {COST TOTAL} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_PRES_FACT_AGR_CCAA_SP_ADMIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_AGR_CCAA_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_PRES_FACT_AGR_CCAA_SP_ADMIN",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          {COMUNITAT AUTONOMA} as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {COMUNITAT AUTONOMA} as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_PRES_FACT_AGR_CCAA_SP_EMPR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_AGR_CCAA_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_PRES_FACT_AGR_CCAA_SP_EMPR",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          {COMUNITATS AUTONOMES} as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {COMUNITATS AUTONOMES} as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_PRES_FACT_AGR_RESUMEN_INVERSIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_AGR_RESUMEN_INVERSIONS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_PRES_FACT_AGR_RESUMEN_INVERSIONS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          COMUNITAT_AUTONOMA as string,",
						"          COST_TOTAL as string,",
						"          ANY_EXC_PRESUPOSTARI as string,",
						"          INVERSIO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          COMUNITAT_AUTONOMA as string,",
						"          COST_TOTAL as string,",
						"          ANY_EXC_PRESUPOSTARI as string,",
						"          INVERSIO as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HIST_PRES_FACT_DET_EST_OOAA_RE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HIST_PRES_FACT_DET_EST_OOAA_RE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Any as string",
						"}",
						"source(output(",
						"          ID_MINISTERI as string,",
						"          DESC_MINISTERI as string,",
						"          COMUNITAT_AUTONOMA as string,",
						"          CODI_CENTRE as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as string,",
						"          DESC_CENTRE as string,",
						"          ID_PROJECTE as string,",
						"          NOM_PROJECTE as string,",
						"          ANY_INICI as string,",
						"          ANY_FI as string,",
						"          PROVINCIA as string,",
						"          TIPUS as string,",
						"          COST_TOTAL as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(DATA_CARREGA = currentDate(),",
						"          DATA_ANY_FITXER = toInteger($Any)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_MINISTERI as string,",
						"          DESC_MINISTERI as string,",
						"          COMUNITAT_AUTONOMA as string,",
						"          CODI_CENTRE as string,",
						"          ID_PROGRAMA as string,",
						"          ID_ARTICLE as string,",
						"          DESC_CENTRE as string,",
						"          ID_PROJECTE as string,",
						"          NOM_PROJECTE as string,",
						"          ANY_INICI as string,",
						"          ANY_FI as string,",
						"          PROVINCIA as string,",
						"          TIPUS as string,",
						"          COST_TOTAL as string,",
						"          ANY_ANTERIOR as string,",
						"          ANY_ACTUAL as string,",
						"          {ANY_ACTUAL+1} as string,",
						"          {ANY_ACTUAL+2} as string,",
						"          {ANY_ACTUAL+3} as string,",
						"          DATA_ANY_FITXER as integer,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}